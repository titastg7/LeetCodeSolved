146. LRU Cache


C++ Code
----------------------------------

class LRUCache {
public:
    list<pair<int,int>> cache;
    unordered_map<int,list<pair<int,int>>::iterator> keys;
    int size;
    LRUCache(int capacity) {
        size=capacity;
    }
    
    int get(int key) {
        if(keys.find(key)==keys.end())
            return -1;
        int value = keys[key]->second;
        cache.erase(keys[key]);
        cache.push_front({key,value});
        keys[key]=cache.begin();
        return value;
    }
    
    void put(int key, int value) {
        if(keys.find(key)!=keys.end())
        {
           cache.erase(keys[key]);
        }
        if(cache.size()==size)
        {
            keys.erase(cache.back().first);
            cache.pop_back();
        }
        cache.push_front({key,value});
        keys[key]=cache.begin();
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
