450. Delete Node in a BST


C++ Code
----------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==NULL)
            return NULL;
        if(root->val>key)
        {
            root->left = deleteNode(root->left,key);
            return root;
        }
        if(root->val<key)
        {
            root->right = deleteNode(root->right,key);
            return root;
        }
        TreeNode* left = root->left;
        TreeNode* right = root->right;
        
        if(left==NULL)
            return right;
        if(right==NULL)
            return left;
        TreeNode* newNode = getLeftMost(right);
        newNode->left=left;
        
        if(newNode!=right)
            newNode->right=right;
        return newNode;
    }
    
    TreeNode* getLeftMost(TreeNode* root)
    {
        TreeNode* node = root;
        if(root->left==NULL)
            return root;
        while(node->left!=NULL && node->left->left!=NULL)
            node=node->left;
        TreeNode* res = node->left;
        node->left = node->left->right;
        return res;
    }
};
