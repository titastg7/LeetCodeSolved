1293. Shortest Path in a Grid with Obstacles Elimination


C++ Code
----------------------------------

class Solution {
public:
    typedef pair<pair<int,int>,int> ii;
    vector<int> cr = {0,0,1,-1};
    vector<int> cc = {1,-1,0,0};
    bool check(int x, int y, int m, int n)
    {
        if(x<0||y<0||x>=m||y>=n)
            return 0;
        return 1;
    }
    
    int shortestPath(vector<vector<int>>& grid, int k) 
    {
        int m=grid.size(),n=grid[0].size(),i,x,y,res=0,sz=0,obsCount;
        if(k==1 && grid[0][0]==1)
            return -1;
        queue<ii> level;
        level.push({{0,0},k});
        vector<vector<vector<bool>>> visited(m, vector<vector<bool>>(n,vector<bool>(k+1,0)));
        visited[0][0][k]=1;
        while(!level.empty())
        {
            sz=level.size();
            while(sz--)
            {
                ii top = level.front();
                level.pop();
                obsCount= top.second;
                if(top.first.first==m-1 && top.first.second==n-1)
                    return res;
                for(i=0;i<4;i++)
                {
                    x = top.first.first+cr[i];
                    y = top.first.second+cc[i];
                    
                    if(!check(x,y,m,n))
                        continue;
                    if(grid[x][y]==0 && !visited[x][y][obsCount])
                    {
                        level.push({{x,y},obsCount});
                        visited[x][y][obsCount]=1;
                    }
                    else if(grid[x][y]==1 && obsCount>0 && !visited[x][y][obsCount-1])
                    {
                        level.push({{x,y},obsCount-1});
                        visited[x][y][obsCount-1]=1;
                    }
                }
            }
            res++;
        }
        return -1;
    }
};
