230. Kth Smallest Element in a BST


C++ Code
----------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find(TreeNode* root, int k, int *ans)
    {
        if(root==NULL)
            return 0;
        
        int leftS = find(root->left,k,ans);
        if(*ans!=-1)
            return 0;
        if(1+leftS == k)
        {
            *ans = root->val;
            return 0;
        }
        int rightS = find(root->right,k-leftS-1,ans);
        return 1+leftS+rightS;
    }
    int kthSmallest(TreeNode* root, int k) {
        if(root==NULL)
            return 0;
        int ans=-1;
        find(root,k,&ans);
        return ans;
            
    }
};
