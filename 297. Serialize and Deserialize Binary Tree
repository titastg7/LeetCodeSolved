297. Serialize and Deserialize Binary Tree


C++ Code
----------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) 
    {
        if(root==NULL)
            return "NULL,";
        return to_string(root->val)+","+serialize(root->left)+serialize(root->right);
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) 
    {
        queue<string> counter;
        int i, n=data.size();
        string s;
        for(i=0;i<n;i++)
        {
            if(data[i]==',')
            {
                counter.push(s);
                s="";
            }
            else
                s +=data[i];
        }
        if(s!="")
            counter.push(s);
        
        return helper(counter);
    }
    
    TreeNode* helper(queue<string>&counter)
    {
        string s=counter.front();
        counter.pop();
        if(s=="NULL")
            return NULL;
        TreeNode* newNode = new TreeNode(stoi(s));
        newNode->left= helper(counter);
        newNode->right = helper(counter);
        return newNode;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
