863. All Nodes Distance K in Binary Tree


C++ Code
----------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void createParentMap(TreeNode* root, TreeNode* parent, unordered_map<TreeNode*,TreeNode*> &parentMap)
    {
        if(root==NULL)
            return;
        parentMap[root]=parent;
        createParentMap(root->left,root,parentMap);
        createParentMap(root->right,root,parentMap);
    }
    void getDistNodes(TreeNode* root, int k, unordered_map<TreeNode*,TreeNode*> parents, unordered_set<TreeNode*> *visited, vector<int>*res)
    {
        if(root==NULL || visited->find(root)!=visited->end())
            return;
        visited->insert(root);
        
        if(k==0)
        {
            res->push_back(root->val);
            return;
        }
        getDistNodes(root->left,k-1,parents,visited,res);
        getDistNodes(root->right,k-1,parents,visited,res);
        getDistNodes(parents[root],k-1,parents,visited,res);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) 
    {
        vector<int> res;
        unordered_set<TreeNode*> visited;
        unordered_map<TreeNode*, TreeNode*> parentMap;
        
        createParentMap(root,NULL,parentMap);
        
        getDistNodes(target,k,parentMap,&visited,&res);
        return res;
    }
};
