341. Flatten Nested List Iterator

C++ Code
----------------------------------

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    queue<int> flattenList;
    void insertInFlattenList(vector<NestedInteger> &nestedList)
    {
        int n=nestedList.size();
        for(auto nList : nestedList)
        {
            if(nList.isInteger())
                flattenList.push(nList.getInteger());
            else
                insertInFlattenList(nList.getList());
        }
    }
    NestedIterator(vector<NestedInteger> &nestedList) 
    {
        insertInFlattenList(nestedList);
    }
    
    int next() 
    {
        if(flattenList.empty())
            return -1;
        int val = flattenList.front();
        flattenList.pop();
        return val;
    }
    
    bool hasNext() 
    {
        return !flattenList.empty();
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
