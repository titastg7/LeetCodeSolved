329. Longest Increasing Path in a Matrix


C++ Code
----------------------------------

class Solution {
public:
    vector<int> cr= {0,0,-1,1};
    vector<int> cc = {-1,1,0,0};
    int globalMax;
    bool check(int i, int j, int m, int n)
    {
        if(i<0 || j<0 || i>=m || j>=n)
            return 0;
        return 1;
    }
    int dfs(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>*memo)
    {
        int k,x,y,m=matrix.size(),n=matrix[0].size(),temp=0;
        if((*memo)[i][j]!=-1)
            return (*memo)[i][j];

        for(k=0;k<4;k++)
        {
            x = i+cr[k];
            y = j+cc[k];
            if(check(x,y,m,n) && matrix[x][y]>matrix[i][j])
            {
                temp = max(temp,1+dfs(matrix,x,y,memo)); 
            }
        }
        (*memo)[i][j] = temp;
        globalMax = max(globalMax, (*memo)[i][j]);
        return (*memo)[i][j];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix)
    {
        int i,j,m=matrix.size(),n=matrix[0].size();
        vector<vector<int>>memo(m,vector<int>(n,-1));
        globalMax=0;
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                if(memo[i][j]==-1)
                    dfs(matrix,i,j,&memo);
            }
        }
        return globalMax+1;
    }
};
