652. Find Duplicate Subtrees


C++ Code
----------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string findAll(TreeNode* root, unordered_map<string,int> &counter, vector<TreeNode*> *res)
    {
        if(root==NULL)
            return "";
        string treeStr = to_string(root->val)+"->"+findAll(root->left,counter,res)+"->"+findAll(root->right,counter,res);
        counter[treeStr]++;
        if(counter[treeStr] == 2)
        {
            res->push_back(root);
        }
        return treeStr;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) 
    {
        vector<TreeNode*> res;
        unordered_map<string,int> counter;
        findAll(root,counter,&res);
        return res;
    }
};
