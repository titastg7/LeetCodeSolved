212. Word Search II


C++ Code
----------------------------------

class Solution {
public:
    vector<int> cr = {0,0,1,-1};
    vector<int> cc = {1,-1,0,0};
    bool isValid(int x, int y, int m, int n)
    {
        if(x<0||y<0||x>=m||y>=n)
            return 0;
        return 1;
    }
    class Trie
    {
        
        public:
                unordered_map<char,Trie*> children;
                bool isEnd;
                Trie()
                {
                    isEnd = false;
                }
                void insert(string word)
                {
                    Trie* temp=this;
                    for(char ch : word)
                    {
                        if(temp->children.find(ch)==temp->children.end())
                        {
                            Trie* newNode = new Trie();
                            temp->children[ch]=newNode;
                        }
                        temp=temp->children[ch];
                    }
                    temp->isEnd=1;
                    
                }
     };
    
    void search(vector<vector<char>>& board, int i, int j, string str,Trie* root, vector<string>*res)
    {
        char ch = board[i][j];

        if(root->children.find(ch)==root->children.end())
            return;
        str +=ch;
        root = root->children[ch];
        
        if(root->isEnd)
        {
            res->push_back(str);
            root->isEnd=0;
        }
        board[i][j]='#';
        int k,x,y,m=board.size(),n=board[0].size();
        for(k=0;k<4;k++)
        {
            x = cr[k]+i;
            y = cc[k]+j;
            if(isValid(x,y,m,n) && board[x][y]!='#')
            {
                search(board,x,y,str,root,res);
            }
        }
        board[i][j]=ch;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) 
    {
        
        int i,j,m=board.size(),n=board[0].size(),l=words.size();
        Trie* root = new Trie();
        for(i=0;i<l;i++)
            root->insert(words[i]);
        vector<string> res;
        
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                search(board,i,j,"",root, &res);
            }
        }
        return res;
    }
};
