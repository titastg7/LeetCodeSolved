1143. Longest Common Subsequence


C++ Code
----------------------------------

Top-Down Approach
-----------------

class Solution {
public:
    int find(string &s1, string &s2, int i, int j, vector<vector<int>> *memo)
    {
        if(i<0||j<0)
            return 0;
        if((*memo)[i][j]!=-1)
            return (*memo)[i][j];
        int t1 = find(s1,s2,i-1,j-1,memo);
        int t2 = find(s1,s2,i-1,j,memo);
        int t3 = find(s1,s2,i,j-1,memo);
        if(s1[i]==s2[j])
            (*memo)[i][j] = 1+ t1;
        else
            (*memo)[i][j] = max(t1,max(t2,t3));
        return (*memo)[i][j]; 
    }
    int longestCommonSubsequence(string text1, string text2) {
        int l1=text1.length(),l2=text2.length();
        vector<vector<int>>memo(l1,vector<int>(l2,-1));
        return find(text1,text2,l1-1,l2-1, &memo);
    }
};


---------------------------------------------------------------------------------

Bottom-Up Approach
-------------------

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int l1=text1.length(),l2=text2.length(),i,j;
        vector<vector<int>>memo(l1+1,vector<int>(l2+1,0));
        
        for(i=1;i<=l1;i++)
        {
            for(j=1;j<=l2;j++)
            {
                if(text1[i-1]==text2[j-1])
                    memo[i][j] = 1+memo[i-1][j-1];
                else
                    memo[i][j] = max(memo[i-1][j-1],max(memo[i-1][j],memo[i][j-1]));
            }
        }
        return memo[l1][l2];
    }
};
