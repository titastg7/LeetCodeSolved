815. Bus Routes


C++ Code
----------------------------------

class Solution {
public:
    bool hasCommonStop(vector<int> route1, vector<int> route2)
    {
        int i=0,j=0,m=route1.size(),n=route2.size();
        while(i<m && j<n)
        {
            if(route1[i]==route2[j])
                return 1;
            else if(route1[i]<route2[j])
                i++;
            else
                j++;
        }
        return 0;
    }
    void createGraph(vector<vector<int>>&routes,vector<vector<int>>&adjList)
    {
        //cout<<" T2 ";
        int i,j, n=routes.size();
        for(i=0;i<n;i++)
        {
            for(j=i+1;j<n;j++)
            {
                if(hasCommonStop(routes[i],routes[j]))
                {
                    adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
            }
        }
    }
    
    void addNodeToLevel(queue<int>&level, int source, vector<vector<int>> routes)
    {
        //cout<<" T4 ";
        int i=0,j,n=routes.size();
        while(i<n)
        {
            for(j=0;j<routes[i].size();j++)
            {
                if(routes[i][j]==source)
                    level.push(i);
            }
            i++;
        }
        return;
    }
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) 
    {
        int i,res=1,n=routes.size(),size=0;
        vector<vector<int>> adjList(n);
        
        if(source==target)
            return 0;
        for(i=0;i<n;i++)
            sort(routes[i].begin(),routes[i].end());
        createGraph(routes,adjList);
        queue<int> level;
        
        addNodeToLevel(level,source,routes);
        vector<int> visited(n,0);

        while(!level.empty())
        {
            
            size = level.size();
            while(size--)
            {
                int route = level.front();
                level.pop();
            
                for(i=0;i<routes[route].size();i++)
                {
                    if(routes[route][i]==target)
                        return res;
                }
                
                for(i=0;i<adjList[route].size();i++)
                {
                    if(!visited[adjList[route][i]])
                    {
                        visited[adjList[route][i]]=1;
                        level.push(adjList[route][i]);
                    }
                }
            }
            res++;
        }
        return -1;
    }
};
