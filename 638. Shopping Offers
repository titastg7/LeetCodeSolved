638. Shopping Offers


C++ Code
----------------------------------



class Solution {
public:   
    bool checkEmpty(vector<int> & needs)
    {
        for( int item : needs)
        {
            if(item!=0)
                return false;
        }
        return true;
    }
    int getMinimumPrice(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int n,
            map<vector<int>, int> *memo )
    {
        if(checkEmpty(needs))
            return 0;
        if(memo->find(needs)!=memo->end())
            return (*memo)[needs];

        int res=0,i;
        for(i=0;i<n;i++)
            res += needs[i]*price[i];
        vector<int> newNeeds(n);
        int localPrice=res,j, offers=special.size();
        for(i=0;i<offers;i++)
        {
            vector<int> newNeeds = needs;
            bool flag =1;
            for(j=0;j<n;j++)
            {
                if(special[i][j]<=needs[j])
                    newNeeds[j] = needs[j]-special[i][j];
                else
                {
                    flag=0;
                    break;
                }
            }
            if(flag)
            {
                localPrice =  special[i][n] + getMinimumPrice(price,special, newNeeds,n,memo);
                res = min(res, localPrice);
            }
        }
        (*memo)[needs] = res;
        return res;
        
    }
    
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) 
    {
        int res=0, n=needs.size();
        map<vector<int>, int> memo;
        return getMinimumPrice(price,special,needs,n,&memo);
    }
};
