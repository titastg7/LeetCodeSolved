1932. Merge BSTs to Create Single BST


C++ Code
----------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void mergeTrees(TreeNode*root, unordered_map<int,TreeNode*> &counter)
    {
        if(root==NULL)
            return;
        if(root->left)
        {
            if(counter[root->left->val])
            {
                root->left= counter[root->left->val];
                counter[root->left->val]=NULL;
            }
        }
        if(root->right)
        {
            if(counter[root->right->val])
            {
                root->right= counter[root->right->val];
                counter[root->right->val]=NULL;
            }
        }
        mergeTrees(root->left,counter);
        mergeTrees(root->right,counter);
    }

    bool isValidBST(TreeNode* root, int leftS, int rightS)
    {
        
        if(root==NULL)
            return 1;
        if(root->val<=leftS || root->val>=rightS)
            return 0;
        return (isValidBST(root->left,leftS,root->val) && isValidBST(root->right,root->val,rightS));
    }
    TreeNode* canMerge(vector<TreeNode*>& trees) 
    {
        unordered_map<int,int> nodeCount;
        unordered_map<int,TreeNode*> counter;
        for(auto tree: trees)
        {
            nodeCount[tree->val]++;
            if(tree->left)
                nodeCount[tree->left->val]++;
            if(tree->right)
                nodeCount[tree->right->val]++;
            counter[tree->val]=tree;
        }
        
        TreeNode* root=NULL;
        for(auto x:trees)
        {
            if(nodeCount[x->val]==1)
            {
                if(root!=NULL)
                    return NULL;    
                root=x;
                
            }
            
        }
        mergeTrees(root,counter);
        int count=0;
        for(auto e:counter)
        {
            if(e.second!=NULL)
                count++;
            if(count>1)
                return NULL;
        }
        return isValidBST(root,INT_MIN,INT_MAX)?root:NULL;
    }
};
