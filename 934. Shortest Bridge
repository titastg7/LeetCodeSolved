934. Shortest Bridge


C++ Code
----------------------------------

class Solution {
public:
    typedef pair<int,int> ii;
    vector<int> cr={0,0,1,-1};
    vector<int> cc={1,-1,0,0};
    bool check(int x, int y, int n)
    {
        if(x<0||y<0||x>=n||y>=n)
            return 0;
        return 1;
    }
    
    void dfs(vector<vector<int>>&grid, int i, int j, int n, queue<ii> *counter)
    {
        counter->push({i,j});
        grid[i][j] =2;
        int k,x,y;
        for(k=0;k<4;k++)
        {
            x = i+cr[k];
            y = j+cc[k];
            if(check(x,y,n) && grid[x][y]==1)
                dfs(grid,x,y,n,counter);
        }
        return;
    }
    int shortestBridge(vector<vector<int>>& grid) 
    {
        int n=grid.size(),i,j,flag=0,dist=0,x,y;
        int res=n*n;
        queue<ii> counter;
        for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    dfs(grid,i,j,n, &counter);
                    flag=1;
                    break;
                }
            }
            if(flag)
                break;
        }
        
        while(!counter.empty())
        {
            int sz = counter.size();
            while(sz--)
            {
                auto top = counter.front();
                counter.pop();
                for(i=0;i<4;i++)
                {
                    x = top.first+cr[i];
                    y = top.second+cc[i];
                    if(check(x,y,n) && grid[x][y]==1)
                    {
                        res = min(res,dist);
                    }
                    else if(check(x,y,n) && grid[x][y]==0)
                    {
                        counter.push({x,y});
                        grid[x][y]=2;
                    }
                }
            }
            dist++;
        }
        return res;
    }
};
