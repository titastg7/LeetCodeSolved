133. Clone Graph

C++ Code
----------------------------------

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    
    Node* clone(Node* node, unordered_map<int,Node*> *tracker)
    {
        if(node==NULL)
            return NULL;
        
        if(tracker->find(node->val)!=tracker->end())
            return (*tracker)[node->val];
        
        Node* newNode = new Node(node->val);
        (*tracker)[node->val] = newNode;
        
        int i,n=node->neighbors.size();
        for(i=0;i<n;i++)
        {
            newNode->neighbors.push_back(clone(node->neighbors[i],tracker));
                
        }
        return newNode;
    }
    Node* cloneGraph(Node* node) 
    {
        if(node==NULL)
            return NULL;
        unordered_map<int,Node*> tracker;
        return clone(node, &tracker);       
    }
};
